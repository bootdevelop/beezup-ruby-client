=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API) 

OpenAPI spec version: 2.0
Contact: help@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class AnalyticsOptimisationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Copy product optimisations between 2 channels
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [CopyOptimisationResponse]
    def copy_optimisation(store_id, request, opts = {})
      data, _status_code, _headers = copy_optimisation_with_http_info(store_id, request, opts)
      return data
    end

    # Copy product optimisations between 2 channels
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CopyOptimisationResponse, Fixnum, Hash)>] CopyOptimisationResponse data, response status code and response headers
    def copy_optimisation_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.copy_optimisation ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.copy_optimisation"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling AnalyticsOptimisationsApi.copy_optimisation"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/copy".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CopyOptimisationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#copy_optimisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products by page
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise(store_id, action_name, request, opts = {})
      optimise_with_http_info(store_id, action_name, request, opts)
      return nil
    end

    # Optimise products by page
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_with_http_info(store_id, action_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.optimise ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.optimise"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling AnalyticsOptimisationsApi.optimise"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling AnalyticsOptimisationsApi.optimise"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/{actionName}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#optimise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise all products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise_all(store_id, action_name, request, opts = {})
      optimise_all_with_http_info(store_id, action_name, request, opts)
      return nil
    end

    # Optimise all products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_all_with_http_info(store_id, action_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.optimise_all ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.optimise_all"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling AnalyticsOptimisationsApi.optimise_all"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling AnalyticsOptimisationsApi.optimise_all"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/all/{actionName}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#optimise_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products by category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products's category for every channel indicated in the body. 
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_category(store_id, catalog_category_id, action_name, opts = {})
      optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts)
      return nil
    end

    # Optimise products by category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body. 
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.optimise_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.optimise_by_category"
      end
      # verify the required parameter 'catalog_category_id' is set
      if @api_client.config.client_side_validation && catalog_category_id.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_category_id' when calling AnalyticsOptimisationsApi.optimise_by_category"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling AnalyticsOptimisationsApi.optimise_by_category"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'catalogCategoryId' + '}', catalog_category_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#optimise_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products by channel
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise_by_channel(store_id, channel_id, action_name, opts = {})
      optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts)
      return nil
    end

    # Optimise products by channel
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.optimise_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.optimise_by_channel"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AnalyticsOptimisationsApi.optimise_by_channel"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling AnalyticsOptimisationsApi.optimise_by_channel"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'channelId' + '}', channel_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#optimise_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise product
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body. 
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_product(store_id, product_id, action_name, opts = {})
      optimise_by_product_with_http_info(store_id, product_id, action_name, opts)
      return nil
    end

    # Optimise product
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body. 
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_product_with_http_info(store_id, product_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsOptimisationsApi.optimise_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsOptimisationsApi.optimise_by_product"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling AnalyticsOptimisationsApi.optimise_by_product"
      end
      # verify the required parameter 'action_name' is set
      if @api_client.config.client_side_validation && action_name.nil?
        fail ArgumentError, "Missing the required parameter 'action_name' when calling AnalyticsOptimisationsApi.optimise_by_product"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsOptimisationsApi#optimise_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
