=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API) 

OpenAPI spec version: 2.0
Contact: help@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class CatalogsCatalogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_catalog_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_change_catalog_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_change_catalog_column_user_name"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_change_catalog_column_user_name"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_change_catalog_column_user_name"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/catalogColumns/{columnId}/rename".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_change_catalog_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_expression(store_id, column_id, request, opts = {})
      catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_change_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_change_custom_column_expression"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_change_custom_column_expression"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_change_custom_column_expression"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_change_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_change_custom_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_change_custom_column_user_name"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_change_custom_column_user_name"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_change_custom_column_user_name"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/{columnId}/rename".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_change_custom_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_compute_expression(store_id, request, opts = {})
      data, _status_code, _headers = catalog_compute_expression_with_http_info(store_id, request, opts)
      return data
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_compute_expression_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_compute_expression ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_compute_expression"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_compute_expression"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/computeExpression".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_compute_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_delete_custom_column(store_id, column_id, opts = {})
      catalog_delete_custom_column_with_http_info(store_id, column_id, opts)
      return nil
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_delete_custom_column_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_delete_custom_column"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_delete_custom_column"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/{columnId}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CatalogColumnList]
    def catalog_get_catalog_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_catalog_columns_with_http_info(store_id, opts)
      return data
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogColumnList, Fixnum, Hash)>] CatalogColumnList data, response status code and response headers
    def catalog_get_catalog_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_catalog_columns"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/catalogColumns".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CatalogColumnList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [CategoryList]
    def catalog_get_categories(store_id, accept_encoding, opts = {})
      data, _status_code, _headers = catalog_get_categories_with_http_info(store_id, accept_encoding, opts)
      return data
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryList, Fixnum, Hash)>] CategoryList data, response status code and response headers
    def catalog_get_categories_with_http_info(store_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_categories ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_categories"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling CatalogsCatalogApi.catalog_get_categories"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/categories".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CategoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_get_custom_column_expression(store_id, column_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_custom_column_expression"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_get_custom_column_expression"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CustomColumnList]
    def catalog_get_custom_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_columns_with_http_info(store_id, opts)
      return data
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumnList, Fixnum, Hash)>] CustomColumnList data, response status code and response headers
    def catalog_get_custom_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_custom_columns"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumnList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product by ProductId
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def catalog_get_product_by_product_id(store_id, product_id, opts = {})
      data, _status_code, _headers = catalog_get_product_by_product_id_with_http_info(store_id, product_id, opts)
      return data
    end

    # Get product by ProductId
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Fixnum, Hash)>] Product data, response status code and response headers
    def catalog_get_product_by_product_id_with_http_info(store_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_product_by_product_id ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_product_by_product_id"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling CatalogsCatalogApi.catalog_get_product_by_product_id"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/products/{productId}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Product')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_product_by_product_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product by Sku
    # 
    # @param store_id Your store identifier
    # @param sku The product sku you want to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def catalog_get_product_by_sku(store_id, sku, opts = {})
      data, _status_code, _headers = catalog_get_product_by_sku_with_http_info(store_id, sku, opts)
      return data
    end

    # Get product by Sku
    # 
    # @param store_id Your store identifier
    # @param sku The product sku you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Fixnum, Hash)>] Product data, response status code and response headers
    def catalog_get_product_by_sku_with_http_info(store_id, sku, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_product_by_sku ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_product_by_sku"
      end
      # verify the required parameter 'sku' is set
      if @api_client.config.client_side_validation && sku.nil?
        fail ArgumentError, "Missing the required parameter 'sku' when calling CatalogsCatalogApi.catalog_get_product_by_sku"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/products".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sku'] = sku

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Product')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_product_by_sku\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ProductList]
    def catalog_get_products(store_id, request, opts = {})
      data, _status_code, _headers = catalog_get_products_with_http_info(store_id, request, opts)
      return data
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductList, Fixnum, Hash)>] ProductList data, response status code and response headers
    def catalog_get_products_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_products ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_products"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_get_products"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/products/list".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get random product list
    # We will return 10 products randomly selected with all product values
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [RandomProductList]
    def catalog_get_random_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_random_products_with_http_info(store_id, opts)
      return data
    end

    # Get random product list
    # We will return 10 products randomly selected with all product values
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RandomProductList, Fixnum, Hash)>] RandomProductList data, response status code and response headers
    def catalog_get_random_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_get_random_products ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_get_random_products"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/products/random".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RandomProductList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_get_random_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_save_custom_column(store_id, column_id, request, opts = {})
      catalog_save_custom_column_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_save_custom_column_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_save_custom_column"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsCatalogApi.catalog_save_custom_column"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsCatalogApi.catalog_save_custom_column"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/customColumns/{columnId}".sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the index of the catalog API for this store
    # The operation will give you all the operations you will be able to do on this store for this API.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CatalogStoreIndex]
    def catalog_store_index(store_id, opts = {})
      data, _status_code, _headers = catalog_store_index_with_http_info(store_id, opts)
      return data
    end

    # Get the index of the catalog API for this store
    # The operation will give you all the operations you will be able to do on this store for this API.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogStoreIndex, Fixnum, Hash)>] CatalogStoreIndex data, response status code and response headers
    def catalog_store_index_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.catalog_store_index ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.catalog_store_index"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CatalogStoreIndex')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#catalog_store_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [LastManualImportInputConfiguration]
    def importation_get_manual_update_last_input_config(store_id, opts = {})
      data, _status_code, _headers = importation_get_manual_update_last_input_config_with_http_info(store_id, opts)
      return data
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastManualImportInputConfiguration, Fixnum, Hash)>] LastManualImportInputConfiguration data, response status code and response headers
    def importation_get_manual_update_last_input_config_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsCatalogApi.importation_get_manual_update_last_input_config ..."
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsCatalogApi.importation_get_manual_update_last_input_config"
      end
      # resource path
      local_var_path = "/user/catalogs/{storeId}/inputConfiguration".sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastManualImportInputConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsCatalogApi#importation_get_manual_update_last_input_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
