=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API) 

OpenAPI spec version: 2.0
Contact: help@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class MarketplacesOrdersOrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @option opts [ChangeOrderRequest] :request 
    # @return [nil]
    def change_order(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, if_match, opts = {})
      change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, if_match, opts)
      return nil
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @option opts [ChangeOrderRequest] :request 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.change_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # verify the required parameter 'change_order_type' is set
      if @api_client.config.client_side_validation && change_order_type.nil?
        fail ArgumentError, "Missing the required parameter 'change_order_type' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling MarketplacesOrdersOrderApi.change_order"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s).sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#change_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Clear an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.clear_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.clear_merchant_order_info"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.clear_merchant_order_info"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.clear_merchant_order_info"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#clear_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Order]
    def get_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.get_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.get_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.get_order"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.get_order"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Order's harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [OrderHistory]
    def get_order_history(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get an Order&#39;s harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(OrderHistory, Fixnum, Hash)>] OrderHistory data, response status code and response headers
    def get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.get_order_history ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.get_order_history"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.get_order_history"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.get_order_history"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#get_order_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.harvest_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.harvest_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.harvest_order"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.harvest_order"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#harvest_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the meta information about the order (ETag, Last-Modified)
    # The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [nil]
    def head_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      head_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Get the meta information about the order (ETag, Last-Modified)
    # The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def head_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.head_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.head_order"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.head_order"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.head_order"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#head_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts)
      return nil
    end

    # Set an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id 
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersOrderApi.set_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      if @api_client.config.client_side_validation && marketplace_technical_code.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesOrdersOrderApi.set_merchant_order_info"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesOrdersOrderApi.set_merchant_order_info"
      end
      # verify the required parameter 'beez_up_order_id' is set
      if @api_client.config.client_side_validation && beez_up_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling MarketplacesOrdersOrderApi.set_merchant_order_info"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling MarketplacesOrdersOrderApi.set_merchant_order_info"
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersOrderApi#set_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
