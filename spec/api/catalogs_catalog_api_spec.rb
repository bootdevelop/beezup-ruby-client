=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API) 

OpenAPI spec version: 2.0
Contact: help@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CatalogsCatalogApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CatalogsCatalogApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CatalogsCatalogApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CatalogsCatalogApi' do
    it 'should create an instance of CatalogsCatalogApi' do
      expect(@instance).to be_instance_of(SwaggerClient::CatalogsCatalogApi)
    end
  end

  # unit tests for catalog_change_catalog_column_user_name
  # Change Catalog Column User Name
  # 
  # @param store_id Your store identifier
  # @param column_id The catalog column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_catalog_column_user_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_change_custom_column_expression
  # Change custom column expression
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_change_custom_column_user_name
  # Change Custom Column User Name
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_custom_column_user_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_compute_expression
  # Compute the expression for this catalog.
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'catalog_compute_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_delete_custom_column
  # Delete custom column
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_delete_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_catalog_columns
  # Get catalog column list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [CatalogColumnList]
  describe 'catalog_get_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_categories
  # Get category list
  # 
  # @param store_id Your store identifier
  # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
  # @param [Hash] opts the optional parameters
  # @return [CategoryList]
  describe 'catalog_get_categories test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_custom_column_expression
  # Get the encrypted custom column expression
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'catalog_get_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_custom_columns
  # Get custom column list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [CustomColumnList]
  describe 'catalog_get_custom_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_product_by_product_id
  # Get product by ProductId
  # 
  # @param store_id Your store identifier
  # @param product_id The product identifier you want to get
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'catalog_get_product_by_product_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_product_by_sku
  # Get product by Sku
  # 
  # @param store_id Your store identifier
  # @param sku The product sku you want to get
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'catalog_get_product_by_sku test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_products
  # Get product list
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ProductList]
  describe 'catalog_get_products test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_random_products
  # Get random product list
  # We will return 10 products randomly selected with all product values
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [RandomProductList]
  describe 'catalog_get_random_products test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_save_custom_column
  # Create or replace a custom column
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_save_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_store_index
  # Get the index of the catalog API for this store
  # The operation will give you all the operations you will be able to do on this store for this API.
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [CatalogStoreIndex]
  describe 'catalog_store_index test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_manual_update_last_input_config
  # Get the last input configuration
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [LastManualImportInputConfiguration]
  describe 'importation_get_manual_update_last_input_config test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
