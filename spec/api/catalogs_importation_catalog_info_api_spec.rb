=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API) 

OpenAPI spec version: 2.0
Contact: help@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CatalogsImportationCatalogInfoApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CatalogsImportationCatalogInfoApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CatalogsImportationCatalogInfoApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CatalogsImportationCatalogInfoApi' do
    it 'should create an instance of CatalogsImportationCatalogInfoApi' do
      expect(@instance).to be_instance_of(SwaggerClient::CatalogsImportationCatalogInfoApi)
    end
  end

  # unit tests for importation_configure_catalog_column
  # Configure catalog column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_configure_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_delete_custom_column
  # Delete Custom Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_delete_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_custom_column_expression
  # Get the encrypted custom column expression in this importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'importation_get_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_custom_columns
  # Get custom columns currently place in this importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [ImportationCustomColumnList]
  describe 'importation_get_custom_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_detected_catalog_columns
  # Get detected catalog columns during this importation.
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [DetectedCatalogColumnList]
  describe 'importation_get_detected_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_product_sample
  # Get the product sample related to this importation with all columns (catalog and custom)
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param product_sample_index Index of the product sample. Starting from 0 to 99.
  # @param [Hash] opts the optional parameters
  # @return [ProductSample]
  describe 'importation_get_product_sample test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_product_sample_custom_column_value
  # Get product sample custom column value related to this importation.
  # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param product_sample_index Index of the product sample. Starting from 0 to 99.
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'importation_get_product_sample_custom_column_value test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_ignore_column
  # Ignore Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_ignore_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_map_catalog_column
  # Map catalog column to a BeezUP column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The catalog column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_map_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_map_custom_column
  # Map custom column to a BeezUP column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_map_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_reattend_column
  # Reattend Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_reattend_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_save_custom_column
  # Create or replace a custom column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_save_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_unmap_catalog_column
  # Unmap catalog column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The catalog column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_unmap_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_unmap_custom_column
  # Unmap custom column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_unmap_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
